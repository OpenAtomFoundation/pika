name: Pika CI Pipeline

on:
  push:
    branches: ["unstable", "3.5", "4.0"]
  pull_request:
    branches: ["unstable", "3.5", "4.0"]

env:
  BUILD_TYPE: RelWithDebInfo
  ARTIFACT_PIKA_NAME: artifact-pika

jobs:
  build_on_ubuntu:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.19

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          key: ubuntu-latest

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf libprotobuf-dev protobuf-compiler clang-tidy

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                -DUSE_PIKA_TOOLS=ON \
                -DCMAKE_CXX_FLAGS_DEBUG=-fsanitize=address \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: |
          cmake --build build --config $BUILD_TYPE

      - name: Cleanup
        run: |
          rm -rf ./deps
          rm -rf ./buildtrees

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_PIKA_NAME }}
          path: ${{ github.workspace }}/build/pika

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -C $BUILD_TYPE --verbose

      - name: Run Unit Tests
        working-directory: ${{ github.workspace }}
        run: ./pikatests.sh all clean

      - name: Start Services for Integration Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          set -e
          chmod +x ../tests/integration/start_master_and_slave.sh
          ../tests/integration/start_master_and_slave.sh
          chmod +x ../tests/integration/start_codis.sh
          ../tests/integration/start_codis.sh

      - name: Run Go E2E Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          cd ../tools/pika_keys_analysis/
          go test -v ./...
          cd ../../tests/integration/
          chmod +x integrate_test.sh
          sh integrate_test.sh

  build_on_rocky:
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9

    steps:
      - name: Install Dependencies
        run: |
          dnf update -y
          dnf install -y epel-release
          dnf install -y bash cmake wget git autoconf gcc perl-Digest-SHA tcl which tar gcc-c++ libstdc++-devel clang make automake

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.19

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DUSE_PIKA_TOOLS=ON -DCMAKE_CXX_FLAGS_DEBUG=-fsanitize=address

      - name: Build
        run: |
          cmake --build build --config $BUILD_TYPE

      - name: Cleanup
        run: |
          rm -rf ./deps
          rm -rf ./buildtrees

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -C $BUILD_TYPE

      - name: Run Unit Tests
        working-directory: ${{ github.workspace }}
        run: ./pikatests.sh all clean

      - name: Start Services for Integration Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          chmod +x ../tests/integration/start_master_and_slave.sh
          ../tests/integration/start_master_and_slave.sh
          chmod +x ../tests/integration/start_codis.sh
          ../tests/integration/start_codis.sh

      - name: Run Go E2E Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          cd ../tools/pika_keys_analysis/
          go test -v ./...
          cd ../../tests/integration/
          chmod +x integrate_test.sh
          sh integrate_test.sh

  build_on_macos:
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.19

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          key: macos-12

      - name: Install Dependencies
        run: |
          brew update
          brew install python@3.12 autoconf protobuf llvm wget git gcc@10 automake cmake make binutils

      - name: Configure CMake
        run: |
          export CC=/usr/local/opt/gcc@10/bin/gcc-10
          cmake -B build -DCMAKE_C_COMPILER=$CC -DUSE_PIKA_TOOLS=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS_DEBUG=-fsanitize=address -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: |
          cmake --build build --config $BUILD_TYPE

      - name: Cleanup
        run: |
          rm -rf ./deps
          rm -rf ./buildtrees

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -C $BUILD_TYPE --verbose

      - name: Run Unit Tests
        working-directory: ${{ github.workspace }}
        run: ./pikatests.sh all clean

      - name: Start Services for Integration Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          chmod +x ../tests/integration/start_master_and_slave.sh
          ../tests/integration/start_master_and_slave.sh
          chmod +x ../tests/integration/start_codis.sh
          ../tests/integration/start_codis.sh

      - name: Run Go E2E Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          cd ../tools/pika_keys_analysis/
          go test -v ./...
          cd ../../tests/integration/
          chmod +x integrate_test.sh
          sh integrate_test.sh

  build_pika_image:
    name: Build Pika Docker Image
    runs-on: ubuntu-latest
    needs: build_on_ubuntu

    steps:
      - name: Check out the Repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: pikadb/pika

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_PIKA_NAME }}
          path: artifact/

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ci/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
