name: Pika

on:
  push:
    branches: [ "unstable" ]
  pull_request:
    branches: [ "unstable" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
            ~/.cache/pip
          key: ${{ runner.os }}-dependencies

      - name: install Deps
        if: ${{ steps.cache.output.cache-hit != 'true' }}
        run: |
          sudo apt install autoconf libprotobuf-dev protobuf-compiler -y
          sudo apt-get install -y clang-tidy-12
          sudo apt-get install -y python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install redis

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_PIKA_TOOLS=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Unit Test
        working-directory: ${{github.workspace}}
        run: |
          ./pikatests.sh all

        # master on port 9221, slave on port 9231, all with 2 db
      - name: Start pika master and slave
        working-directory: ${{github.workspace}}/build
        run: |
          chmod +x ../tests/integration/start_master_and_slave.sh
          ../tests/integration/start_master_and_slave.sh

      - name: Run Python E2E Tests
        working-directory: ${{github.workspace}}/build
        run: |
          python3 ../tests/integration/rpoplpush_replication_test.py


  build_on_centos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: centos:7

    steps:
      - name: Install deps
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          yum install -y wget git autoconf centos-release-scl
          yum install -y devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-make devtoolset-10-bin-util
          yum install -y llvm-toolset-7
          yum install -y llvm-toolset-7-clang
          source /opt/rh/devtoolset-10/enable
          gcc --version
          make --version


      - name: Install cmake
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh
          bash ./cmake-3.26.4-linux-x86_64.sh --skip-license --prefix=/usr
          cmake --version

      - name: checkout
        working-directory: ${{github.workspace}}
        run: |
          echo Fetching $GITHUB_REPOSITORY@$GITHUB_SHA
          git init
          git fetch --depth 1 https://github.com/$GITHUB_REPOSITORY $GITHUB_SHA
          git checkout $GITHUB_SHA

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          source /opt/rh/devtoolset-10/enable
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_PIKA_TOOLS=ON

      - name: Build
        # Build your program with the given configuration
        run: |
          cd ${{github.workspace}}
          source /opt/rh/devtoolset-10/enable
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          cd ${{github.workspace}}/build
          source /opt/rh/devtoolset-10/enable
          ctest -C ${{env.BUILD_TYPE}}

