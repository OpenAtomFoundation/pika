package InnerMessage;

enum Type {
  kMetaSync    = 1;
  kTrySync     = 2;
  kDBSync      = 3;
  kBinlogSync  = 4;
  kHeatBeat    = 5;
}

enum StatusCode {
  kOk       = 1;
  kError    = 2;
}

message BinlogOffset {
  required uint32  filenum = 1;
  required uint64  offset  = 2;
}

message Node {
  required string ip   = 1;
  required int32  port = 2;
}

message Partition {
  required string table_name   = 1;
  required uint32 partition_id = 2;
}

// Request message
message InnerRequest {
  // slave to master
  message MetaSync {
    required Node   node = 1;
    optional string auth = 2;
  }

  // slave to master
  message TrySync {
    required Node         node           = 1;
    required Partition    partition      = 2;
    required BinlogOffset binlog_offset  = 3;
  }

  // slave to master
  message DBSync {
    required Node         node           = 1;
    required Partition    partition      = 2;
    required BinlogOffset binlog_offset  = 3;
  }

  message BinlogSync {
    required string       table_name      = 1;
    required uint32       partition_id    = 2;
    required BinlogOffset ack_range_start = 3;
    required BinlogOffset ack_range_end   = 4;
  }

  // slave to master
  message HeatBeat {
    required Node   node = 1;
    required string ping = 2;
    optional int64  sid  = 3;
  }

  required Type        type         = 1;
  optional MetaSync    meta_sync    = 2;
  optional TrySync     try_sync     = 3;
  optional DBSync      db_sync      = 4;
  optional BinlogSync  binlog_sync  = 5;
  optional HeatBeat    heat_beat    = 6;
}

message PartitionInfo {
  required uint32 partition_id = 1;
  required Node   master       = 2;
  repeated Node   slaves       = 3;
}

// Response message
message InnerResponse {
  // master to slave
  message MetaSync {
    message TableInfo {
      required string        table_name    = 1;
      required int32         partition_num = 2;
    }
    required bool      classic_mode = 1;
    repeated TableInfo tables_info  = 2;
    required int64     sid          = 3;
  }

  // master to slave
  message TrySync {
    enum ReplyCode {
      kOk                = 1;
      kSyncPointBePurged = 2;
      kSyncPointLarger   = 3;
      kError             = 4;
    }
    required ReplyCode    reply_code    = 1;
    required Partition    partition     = 2;
    optional BinlogOffset binlog_offset = 3;
    optional int32        sid           = 4;
  }

  message DBSync {
    enum ReplyCode {
      kWait          = 1;
    }
    required ReplyCode reply_code = 1;
    required Partition partition  = 2;
  }

  // master to slave
  message BinlogSync {
    required Node           node          = 1;
    required string         table_name    = 2;
    required uint32         partition_id  = 3;
    required BinlogOffset   binlog_offset = 4;
    required bytes          binlog        = 5;
  }

  // slave to master
  message HeatBeat {
    required string pong = 1;
  }

  required Type       type         = 1;
  required StatusCode code         = 2;
  optional string     reply        = 3;
  optional MetaSync   meta_sync    = 4;
  optional DBSync     db_sync      = 5;
  optional TrySync    try_sync     = 6;
  repeated BinlogSync binlog_sync  = 7;
  optional HeatBeat   heat_beat    = 8;
}
